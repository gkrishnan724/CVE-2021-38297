package main

import (
	"fmt"
	"os"
	"syscall/js"
	"unsafe"
	"encoding/binary"
)

// var ptr = unsafe.Pointer(uintptr(0x5000))
// var link = (*string)(ptr)
var data2 = "Hello world"

func gopal(this js.Value, p []js.Value) interface{} {
	if len(p) != 2 {
		return "Please provide two numbers"
	}

	num1 := p[0].Float()
	num2 := p[1].Float()

	result := num1 + num2
	return result
}

func checkData(this js.Value, p []js.Value) interface{} {
	fmt.Print(data2)
	return data2
}

func printArgsLocation() interface{} {
	fmt.Printf("Os args at (%p), Global data2(ptr,val) at (%p, %s), \n", &os.Args, &data2, data2)
	fmt.Println(len(os.Args), os.Args)
	fmt.Println(data2)
	fmt.Println("Starting at 0x0010")
	for addr := 0x0010; addr < 0x1f000; addr+=0x20 {
		ptr := unsafe.Pointer(uintptr(addr))
		p := (*uint64)(ptr)
		if (*p) != 0 {
			bs := make([]byte, 0x20)
			for chunk := 0; chunk < 0x20; chunk+=8 {
				binary.LittleEndian.PutUint64(bs[chunk:chunk+8], *p)
				fmt.Printf("Type: %T, Ptr: %v, Val: 0x%x,", p, p, *p)
			}
			fmt.Printf("%s\n", bs)
		}
	}
	return os.Args
}

func registerCallbacks() {
	js.Global().Set("add", js.FuncOf(gopal))
	js.Global().Set("printGlobal", js.FuncOf(checkData))
}

func main() {
	// c := make(chan struct{}, 0)
	fmt.Println("Go WebAssembly Initialized")
	registerCallbacks()
	printArgsLocation()

	// <-c
}
